{"ast":null,"code":"import _taggedTemplateLiteral from \"/Volumes/Ravenclaw/_d_Development/Work/django-react-graphql-boilerplate/django-react-boilerplate/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Volumes/Ravenclaw/_d_Development/Work/django-react-graphql-boilerplate/django-react-boilerplate/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Volumes/Ravenclaw/_d_Development/Work/django-react-graphql-boilerplate/django-react-boilerplate/src/components/Auth/Login.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation($username: String!, $password: String!) {\\n    tokenAuth(username: $username, password: $password) {\\n      token\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport { useApolloClient, useMutation } from \"@apollo/react-hooks\"; // import { Mutation } from \"react-apollo\";\n\nimport { gql } from \"apollo-boost\";\n\nconst Login = () => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        username = _useState2[0],\n        setUsername = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        password = _useState4[0],\n        setPassword = _useState4[1];\n\n  const _useMutation = useMutation(TOKEN_AUTH_MUTATION),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        tokenAuth = _useMutation2[0],\n        _useMutation2$ = _useMutation2[1],\n        loading = _useMutation2$.loading,\n        error = _useMutation2$.error,\n        client = _useMutation2$.client;\n\n  const handleSubmit = async (e, tokenAuth, client) => {\n    e.preventDefault();\n    const res = await tokenAuth({\n      variables: {\n        username,\n        password\n      }\n    }); // localStorage.setItem(\"authToken\", res.data.tokenAuth.token);\n    // client.cache.writeData({ data: { isLoggedIn: true } });\n  };\n\n  return React.createElement(Mutation, {\n    mutation: TOKEN_AUTH_MUTATION,\n    variables: {\n      username,\n      password\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, (tokenAuth, {\n    loading,\n    error\n  }) => React.createElement(\"form\", {\n    onSubmit: e => handleSubmit(e, tokenAuth),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"username\",\n    onChange: e => setUsername(e.target.value),\n    value: username,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"password\",\n    placeholder: \"password\",\n    onChange: e => setPassword(e.target.value),\n    value: password,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Submit\")));\n};\n\nconst TOKEN_AUTH_MUTATION = gql(_templateObject());\nexport default Login;","map":{"version":3,"sources":["/Volumes/Ravenclaw/_d_Development/Work/django-react-graphql-boilerplate/django-react-boilerplate/src/components/Auth/Login.js"],"names":["React","useState","useApolloClient","useMutation","gql","Login","username","setUsername","password","setPassword","TOKEN_AUTH_MUTATION","tokenAuth","loading","error","client","handleSubmit","e","preventDefault","res","variables","target","value"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,eAAT,EAA0BC,WAA1B,QAA6C,qBAA7C,C,CACA;;AACA,SAASC,GAAT,QAAoB,cAApB;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA,oBACcJ,QAAQ,CAAC,EAAD,CADtB;AAAA;AAAA,QACXK,QADW;AAAA,QACDC,WADC;;AAAA,qBAEcN,QAAQ,CAAC,EAAD,CAFtB;AAAA;AAAA,QAEXO,QAFW;AAAA,QAEDC,WAFC;;AAAA,uBAI4BN,WAAW,CAACO,mBAAD,CAJvC;AAAA;AAAA,QAIXC,SAJW;AAAA;AAAA,QAICC,OAJD,kBAICA,OAJD;AAAA,QAIUC,KAJV,kBAIUA,KAJV;AAAA,QAIiBC,MAJjB,kBAIiBA,MAJjB;;AAMlB,QAAMC,YAAY,GAAG,OAAOC,CAAP,EAAUL,SAAV,EAAqBG,MAArB,KAAgC;AACnDE,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,GAAG,GAAG,MAAMP,SAAS,CAAC;AAAEQ,MAAAA,SAAS,EAAE;AAAEb,QAAAA,QAAF;AAAYE,QAAAA;AAAZ;AAAb,KAAD,CAA3B,CAFmD,CAGnD;AACA;AACD,GALD;;AAQA,SACE,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAEE,mBAApB;AAAyC,IAAA,SAAS,EAAE;AAAEJ,MAAAA,QAAF;AAAYE,MAAAA;AAAZ,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACG,SAAD,EAAY;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAZ,KACC;AAAM,IAAA,QAAQ,EAAEG,CAAC,IAAID,YAAY,CAACC,CAAD,EAAIL,SAAJ,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC,UAFd;AAGE,IAAA,QAAQ,EAAEK,CAAC,IAAIT,WAAW,CAACS,CAAC,CAACI,MAAF,CAASC,KAAV,CAH5B;AAIE,IAAA,KAAK,EAAEf,QAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,WAAW,EAAC,UAFd;AAGE,IAAA,QAAQ,EAAEU,CAAC,IAAIP,WAAW,CAACO,CAAC,CAACI,MAAF,CAASC,KAAV,CAH5B;AAIE,IAAA,KAAK,EAAEb,QAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAaE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF,CAFJ,CADF;AAqBD,CAnCD;;AAqCA,MAAME,mBAAmB,GAAGN,GAAH,mBAAzB;AAQA,eAAeC,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useApolloClient, useMutation } from \"@apollo/react-hooks\";\n// import { Mutation } from \"react-apollo\";\nimport { gql } from \"apollo-boost\";\n\nconst Login = () => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const [tokenAuth, {loading, error, client}] = useMutation(TOKEN_AUTH_MUTATION);\n\n  const handleSubmit = async (e, tokenAuth, client) => {\n    e.preventDefault();\n    const res = await tokenAuth({ variables: { username, password } });\n    // localStorage.setItem(\"authToken\", res.data.tokenAuth.token);\n    // client.cache.writeData({ data: { isLoggedIn: true } });\n  };\n\n\n  return (\n    <Mutation mutation={TOKEN_AUTH_MUTATION} variables={{ username, password }}>\n      {(tokenAuth, { loading, error}) => (\n        <form onSubmit={e => handleSubmit(e, tokenAuth)}>\n          <input\n            type=\"text\"\n            placeholder=\"username\"\n            onChange={e => setUsername(e.target.value)}\n            value={username}\n          />\n          <input\n            type=\"password\"\n            placeholder=\"password\"\n            onChange={e => setPassword(e.target.value)}\n            value={password}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    </Mutation>\n  );\n};\n\nconst TOKEN_AUTH_MUTATION = gql`\n  mutation($username: String!, $password: String!) {\n    tokenAuth(username: $username, password: $password) {\n      token\n    }\n  }\n`;\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}