{"ast":null,"code":"import _taggedTemplateLiteral from \"/Volumes/Ravenclaw/_d_Development/Work/django-react-graphql-boilerplate/django-react-boilerplate/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Volumes/Ravenclaw/_d_Development/Work/django-react-graphql-boilerplate/django-react-boilerplate/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Volumes/Ravenclaw/_d_Development/Work/django-react-graphql-boilerplate/django-react-boilerplate/src/components/Auth/Login.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation($username: String!, $password: String!) {\\n    tokenAuth(username: $username, password: $password) {\\n      token\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\n\nconst Login = client => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        username = _useState2[0],\n        setUsername = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        password = _useState4[0],\n        setPassword = _useState4[1];\n\n  const _useMutation = useMutation(TOKEN_AUTH_MUTATION),\n        _useMutation2 = _slicedToArray(_useMutation, 2),\n        tokenAuth = _useMutation2[0],\n        _useMutation2$ = _useMutation2[1],\n        loading = _useMutation2$.loading,\n        error = _useMutation2$.error;\n\n  const handleSubmit = async (e, tokenAuth, client) => {\n    e.preventDefault();\n    const res = await tokenAuth({\n      variables: {\n        username,\n        password\n      }\n    });\n    localStorage.setItem(\"authToken\", res.data.tokenAuth.token);\n    client.writeData({\n      data: {\n        isLoggedIn: true\n      }\n    });\n  };\n\n  return React.createElement(\"form\", {\n    onSubmit: e => handleSubmit(e, tokenAuth, client),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"username\",\n    onChange: e => setUsername(e.target.value),\n    value: username,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"password\",\n    placeholder: \"password\",\n    onChange: e => setPassword(e.target.value),\n    value: password,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Submit\"));\n};\n\nconst TOKEN_AUTH_MUTATION = gql(_templateObject());\nexport default Login;","map":{"version":3,"sources":["/Volumes/Ravenclaw/_d_Development/Work/django-react-graphql-boilerplate/django-react-boilerplate/src/components/Auth/Login.js"],"names":["React","useState","useMutation","gql","Login","client","username","setUsername","password","setPassword","TOKEN_AUTH_MUTATION","tokenAuth","loading","error","handleSubmit","e","preventDefault","res","variables","localStorage","setItem","data","token","writeData","isLoggedIn","target","value"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,GAAT,QAAoB,cAApB;;AAEA,MAAMC,KAAK,GAAIC,MAAD,IAAY;AAAA,oBACQJ,QAAQ,CAAC,EAAD,CADhB;AAAA;AAAA,QACjBK,QADiB;AAAA,QACPC,WADO;;AAAA,qBAEQN,QAAQ,CAAC,EAAD,CAFhB;AAAA;AAAA,QAEjBO,QAFiB;AAAA,QAEPC,WAFO;;AAAA,uBAIgBP,WAAW,CACjDQ,mBADiD,CAJ3B;AAAA;AAAA,QAIjBC,SAJiB;AAAA;AAAA,QAIJC,OAJI,kBAIJA,OAJI;AAAA,QAIKC,KAJL,kBAIKA,KAJL;;AAQxB,QAAMC,YAAY,GAAG,OAAOC,CAAP,EAAUJ,SAAV,EAAqBN,MAArB,KAAgC;AACnDU,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,GAAG,GAAG,MAAMN,SAAS,CAAC;AAAEO,MAAAA,SAAS,EAAE;AAAEZ,QAAAA,QAAF;AAAYE,QAAAA;AAAZ;AAAb,KAAD,CAA3B;AACAW,IAAAA,YAAY,CAACC,OAAb,CAAqB,WAArB,EAAkCH,GAAG,CAACI,IAAJ,CAASV,SAAT,CAAmBW,KAArD;AACAjB,IAAAA,MAAM,CAACkB,SAAP,CAAiB;AAAEF,MAAAA,IAAI,EAAE;AAAEG,QAAAA,UAAU,EAAE;AAAd;AAAR,KAAjB;AACD,GALD;;AAOA,SACE;AAAM,IAAA,QAAQ,EAAET,CAAC,IAAID,YAAY,CAACC,CAAD,EAAIJ,SAAJ,EAAeN,MAAf,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC,UAFd;AAGE,IAAA,QAAQ,EAAEU,CAAC,IAAIR,WAAW,CAACQ,CAAC,CAACU,MAAF,CAASC,KAAV,CAH5B;AAIE,IAAA,KAAK,EAAEpB,QAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,WAAW,EAAC,UAFd;AAGE,IAAA,QAAQ,EAAES,CAAC,IAAIN,WAAW,CAACM,CAAC,CAACU,MAAF,CAASC,KAAV,CAH5B;AAIE,IAAA,KAAK,EAAElB,QAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAaE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF,CADF;AAiBD,CAhCD;;AAkCA,MAAME,mBAAmB,GAAGP,GAAH,mBAAzB;AAQA,eAAeC,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\n\nconst Login = (client) => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const [tokenAuth, { loading, error }] = useMutation(\n    TOKEN_AUTH_MUTATION\n  );\n\n  const handleSubmit = async (e, tokenAuth, client) => {\n    e.preventDefault();\n    const res = await tokenAuth({ variables: { username, password } });\n    localStorage.setItem(\"authToken\", res.data.tokenAuth.token);\n    client.writeData({ data: { isLoggedIn: true } });\n  };\n\n  return (\n    <form onSubmit={e => handleSubmit(e, tokenAuth, client)}>\n      <input\n        type=\"text\"\n        placeholder=\"username\"\n        onChange={e => setUsername(e.target.value)}\n        value={username}\n      />\n      <input\n        type=\"password\"\n        placeholder=\"password\"\n        onChange={e => setPassword(e.target.value)}\n        value={password}\n      />\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n\nconst TOKEN_AUTH_MUTATION = gql`\n  mutation($username: String!, $password: String!) {\n    tokenAuth(username: $username, password: $password) {\n      token\n    }\n  }\n`;\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}