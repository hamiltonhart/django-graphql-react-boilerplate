{"ast":null,"code":"import _taggedTemplateLiteral from \"/Volumes/Ravenclaw/_d_Development/Work/django-react-graphql-boilerplate/django-react-boilerplate/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Volumes/Ravenclaw/_d_Development/Work/django-react-graphql-boilerplate/django-react-boilerplate/src/components/Auth/Login.js\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  {\\n    users{\\n      id\\n      username\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation($username: String!, $password: String!) {\\n    tokenAuth(username: $username, password: $password) {\\n      token\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport { useApolloClient, useQuery } from \"@apollo/react-hooks\";\nimport { Mutation } from \"react-apollo\";\nimport { gql } from \"apollo-boost\";\n\nconst Login = () => {\n  // const [username, setUsername] = useState(\"\");\n  // const [password, setPassword] = useState(\"\");\n  const _useQuery = useQuery(USERS_QUERY),\n        data = _useQuery.data,\n        loading = _useQuery.loading,\n        error = _useQuery.error;\n\n  const client = useApolloClient(); // const handleSubmit = async (e, tokenAuth, client) => {\n  //   e.preventDefault();\n  //   const res = await tokenAuth({ variables: { username, password } });\n  //   // localStorage.setItem(\"authToken\", res.data.tokenAuth.token);\n  //   // client.cache.writeData({ data: { isLoggedIn: true } });\n  //   console.log(client);\n  // };\n\n  if (loading) return React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Loading\");\n  if (error) return React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Error: \", error);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Login Page Done\"), data.users.map(user => React.createElement(\"h3\", {\n    key: user.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, user.username))); // return (\n  //   <Mutation mutation={TOKEN_AUTH_MUTATION} variables={{ username, password }}>\n  //     {(tokenAuth, { loading, error}) => (\n  //       <form onSubmit={e => handleSubmit(e, tokenAuth, client)}>\n  //         {console.log(client)}\n  //         <input\n  //           type=\"text\"\n  //           placeholder=\"username\"\n  //           onChange={e => setUsername(e.target.value)}\n  //           value={username}\n  //         />\n  //         <input\n  //           type=\"password\"\n  //           placeholder=\"password\"\n  //           onChange={e => setPassword(e.target.value)}\n  //           value={password}\n  //         />\n  //         <button type=\"submit\">Submit</button>\n  //       </form>\n  //     )}\n  //   </Mutation>\n  // );\n};\n\nconst TOKEN_AUTH_MUTATION = gql(_templateObject());\nconst USERS_QUERY = gql(_templateObject2());\nexport default Login;","map":{"version":3,"sources":["/Volumes/Ravenclaw/_d_Development/Work/django-react-graphql-boilerplate/django-react-boilerplate/src/components/Auth/Login.js"],"names":["React","useState","useApolloClient","useQuery","Mutation","gql","Login","USERS_QUERY","data","loading","error","client","users","map","user","id","username","TOKEN_AUTH_MUTATION"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,eAAT,EAA0BC,QAA1B,QAA0C,qBAA1C;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAClB;AACA;AAFkB,oBAGaH,QAAQ,CAACI,WAAD,CAHrB;AAAA,QAGXC,IAHW,aAGXA,IAHW;AAAA,QAGLC,OAHK,aAGLA,OAHK;AAAA,QAGIC,KAHJ,aAGIA,KAHJ;;AAIlB,QAAMC,MAAM,GAAGT,eAAe,EAA9B,CAJkB,CAMlB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAGO,OAAH,EAAY,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACZ,MAAGC,KAAH,EAAU,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAYA,KAAZ,CAAP;AAEV,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,EAEGF,IAAI,CAACI,KAAL,CAAWC,GAAX,CAAeC,IAAI,IAAI;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBD,IAAI,CAACE,QAAxB,CAAvB,CAFH,CADF,CAjBkB,CAyBlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CA/CD;;AAiDA,MAAMC,mBAAmB,GAAGZ,GAAH,mBAAzB;AAQA,MAAME,WAAW,GAAGF,GAAH,oBAAjB;AASA,eAAeC,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useApolloClient, useQuery } from \"@apollo/react-hooks\";\nimport { Mutation } from \"react-apollo\";\nimport { gql } from \"apollo-boost\";\n\nconst Login = () => {\n  // const [username, setUsername] = useState(\"\");\n  // const [password, setPassword] = useState(\"\");\n  const {data, loading, error} = useQuery(USERS_QUERY);\n  const client = useApolloClient();\n\n  // const handleSubmit = async (e, tokenAuth, client) => {\n  //   e.preventDefault();\n  //   const res = await tokenAuth({ variables: { username, password } });\n  //   // localStorage.setItem(\"authToken\", res.data.tokenAuth.token);\n  //   // client.cache.writeData({ data: { isLoggedIn: true } });\n  //   console.log(client);\n  // };\n\n  if(loading) return <h1>Loading</h1>\n  if(error) return <h1>Error: {error}</h1>\n\n  return(\n    <div>\n      <h1>Login Page Done</h1>\n      {data.users.map(user => <h3 key={user.id}>{user.username}</h3>)}\n\n    </div>\n  )\n\n  // return (\n  //   <Mutation mutation={TOKEN_AUTH_MUTATION} variables={{ username, password }}>\n  //     {(tokenAuth, { loading, error}) => (\n  //       <form onSubmit={e => handleSubmit(e, tokenAuth, client)}>\n  //         {console.log(client)}\n  //         <input\n  //           type=\"text\"\n  //           placeholder=\"username\"\n  //           onChange={e => setUsername(e.target.value)}\n  //           value={username}\n  //         />\n  //         <input\n  //           type=\"password\"\n  //           placeholder=\"password\"\n  //           onChange={e => setPassword(e.target.value)}\n  //           value={password}\n  //         />\n  //         <button type=\"submit\">Submit</button>\n  //       </form>\n  //     )}\n  //   </Mutation>\n  // );\n};\n\nconst TOKEN_AUTH_MUTATION = gql`\n  mutation($username: String!, $password: String!) {\n    tokenAuth(username: $username, password: $password) {\n      token\n    }\n  }\n`;\n\nconst USERS_QUERY = gql`\n  {\n    users{\n      id\n      username\n    }\n  }\n`;\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}