{"ast":null,"code":"import _taggedTemplateLiteral from \"/Volumes/Ravenclaw/_d_Development/Work/django-react-graphql-boilerplate/django-react-boilerplate/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Volumes/Ravenclaw/_d_Development/Work/django-react-graphql-boilerplate/django-react-boilerplate/src/index.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  query {\\n    isLoggedIn @client\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Auth from \"./components/Auth\";\nimport { Query } from \"react-apollo\";\nimport { ApolloProvider, useQuery } from \"@apollo/react-hooks\";\nimport ApolloClient, { gql, InMemoryCache } from \"apollo-boost\";\nimport * as serviceWorker from \"./serviceWorker\"; // uri: \"http://example.herokuapp.com/graphql/\"\n// !Apollo Client is available to the entire app\n// ! fetchOptions: {credentials: 'include' - means to include operation.headers (just below in the request)}\n// const cache = new InMemoryCache();\n// const client = new ApolloClient({\n//   uri: \"http://localhost:8000/graphql/\",\n//   cache,\n//   fetchOptions: {\n//     credentials: \"include\"\n//   },\n//   request: operation => {\n//     const token = localStorage.getItem(\"authToken\") || \"\";\n//     operation.setContext({\n//       headers: {\n//         Authorization: `JWT ${token}`\n//       }\n//     });\n//   }\n// });\n// cache.writeData({\n//   data: {\n//     isLoggedIn: !!localStorage.getItem(\"authToken\")\n//   }\n// });\n// const IS_LOGGED_IN_QUERY = gql`\n//   {\n//     isLoggedIn @client\n//   }\n// `;\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:8000/graphql/\",\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  request: operation => {\n    const token = localStorage.getItem('authToken') || \"\";\n    operation.setContext({\n      headers: {\n        Authorization: \"JWT \".concat(token)\n      }\n    });\n  },\n  clientState: {\n    defaults: {\n      // !The double bangs converts any value to a boolean\n      isLoggedIn: !!localStorage.getItem(\"authToken\")\n    }\n  }\n});\nconst IS_LOGGED_IN_QUERY = gql(_templateObject()); // ! Change the turnary below to include an authorization page, or whatever the user should see if they are not logged in.\n\nReactDOM.render(React.createElement(ApolloProvider, {\n  client: client,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 75\n  },\n  __self: this\n}, React.createElement(Query, {\n  query: IS_LOGGED_IN_QUERY,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 76\n  },\n  __self: this\n}, ({\n  data\n}) => data.isLoggedIn ? React.createElement(App, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 77\n  },\n  __self: this\n}) : React.createElement(Auth, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 77\n  },\n  __self: this\n}))), document.getElementById(\"root\")); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister(); // const client = new ApolloClient({\n//   uri: \"http://localhost:8000/graphql/\",\n//   fetchOptions: {\n//     credentials: \"include\"\n//   },\n//   request: operation => {\n//     const token = localStorage.getItem('authToken') || \"\";\n//     operation.setContext({\n//       headers: {\n//         Authorization: `JWT ${token}`\n//       }\n//     })\n//   },\n//   clientState: {\n//     defaults: {\n//       // !The double bangs converts any value to a boolean\n//       isLoggedIn: !!localStorage.getItem(\"authToken\")\n//     }\n//   }\n// });\n// Does a query on the client (not the server) and the returned value (boolean) determines what the user sees, in this case home page or authorization page\n// const IS_LOGGED_IN_QUERY = gql`\n//   query {\n//     isLoggedIn @client\n//   }\n// `;","map":{"version":3,"sources":["/Volumes/Ravenclaw/_d_Development/Work/django-react-graphql-boilerplate/django-react-boilerplate/src/index.js"],"names":["React","ReactDOM","App","Auth","Query","ApolloProvider","useQuery","ApolloClient","gql","InMemoryCache","serviceWorker","client","uri","fetchOptions","credentials","request","operation","token","localStorage","getItem","setContext","headers","Authorization","clientState","defaults","isLoggedIn","IS_LOGGED_IN_QUERY","render","data","document","getElementById","unregister"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA,SAASC,KAAT,QAAsB,cAAtB;AACA,SAASC,cAAT,EAAyBC,QAAzB,QAAyC,qBAAzC;AACA,OAAOC,YAAP,IAAuBC,GAAvB,EAA4BC,aAA5B,QAAgD,cAAhD;AAEA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B,C,CACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,MAAM,GAAG,IAAIJ,YAAJ,CAAiB;AAC9BK,EAAAA,GAAG,EAAE,gCADyB;AAE9BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE;AADD,GAFgB;AAK9BC,EAAAA,OAAO,EAAEC,SAAS,IAAI;AACpB,UAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,KAAqC,EAAnD;AACAH,IAAAA,SAAS,CAACI,UAAV,CAAqB;AACnBC,MAAAA,OAAO,EAAE;AACPC,QAAAA,aAAa,gBAASL,KAAT;AADN;AADU,KAArB;AAKD,GAZ6B;AAa9BM,EAAAA,WAAW,EAAE;AACXC,IAAAA,QAAQ,EAAE;AACR;AACAC,MAAAA,UAAU,EAAE,CAAC,CAACP,YAAY,CAACC,OAAb,CAAqB,WAArB;AAFN;AADC;AAbiB,CAAjB,CAAf;AAqBA,MAAMO,kBAAkB,GAAGlB,GAAH,mBAAxB,C,CAMA;;AAEAP,QAAQ,CAAC0B,MAAT,CACE,oBAAC,cAAD;AAAgB,EAAA,MAAM,EAAEhB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,KAAD;AAAO,EAAA,KAAK,EAAEe,kBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACG,CAAC;AAAEE,EAAAA;AAAF,CAAD,KAAeA,IAAI,CAACH,UAAL,GAAkB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAlB,GAA4B,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAD9C,CADF,CADF,EAMEI,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CANF,E,CASA;AACA;AACA;;AACApB,aAAa,CAACqB,UAAd,G,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Auth from \"./components/Auth\";\n\nimport { Query } from \"react-apollo\";\nimport { ApolloProvider, useQuery } from \"@apollo/react-hooks\";\nimport ApolloClient, { gql, InMemoryCache} from \"apollo-boost\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n// uri: \"http://example.herokuapp.com/graphql/\"\n\n// !Apollo Client is available to the entire app\n// ! fetchOptions: {credentials: 'include' - means to include operation.headers (just below in the request)}\n// const cache = new InMemoryCache();\n// const client = new ApolloClient({\n//   uri: \"http://localhost:8000/graphql/\",\n//   cache,\n//   fetchOptions: {\n//     credentials: \"include\"\n//   },\n//   request: operation => {\n//     const token = localStorage.getItem(\"authToken\") || \"\";\n//     operation.setContext({\n//       headers: {\n//         Authorization: `JWT ${token}`\n//       }\n//     });\n//   }\n// });\n\n// cache.writeData({\n//   data: {\n//     isLoggedIn: !!localStorage.getItem(\"authToken\")\n//   }\n// });\n\n// const IS_LOGGED_IN_QUERY = gql`\n//   {\n//     isLoggedIn @client\n//   }\n// `;\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:8000/graphql/\",\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  request: operation => {\n    const token = localStorage.getItem('authToken') || \"\";\n    operation.setContext({\n      headers: {\n        Authorization: `JWT ${token}`\n      }\n    })\n  },\n  clientState: {\n    defaults: {\n      // !The double bangs converts any value to a boolean\n      isLoggedIn: !!localStorage.getItem(\"authToken\")\n    }\n  }\n});\n\nconst IS_LOGGED_IN_QUERY = gql`\n  query {\n    isLoggedIn @client\n  }\n`;\n\n// ! Change the turnary below to include an authorization page, or whatever the user should see if they are not logged in.\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Query query={IS_LOGGED_IN_QUERY}>\n      {({ data }) => (data.isLoggedIn ? <App /> : <Auth />)}\n    </Query>\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// const client = new ApolloClient({\n//   uri: \"http://localhost:8000/graphql/\",\n//   fetchOptions: {\n//     credentials: \"include\"\n//   },\n//   request: operation => {\n//     const token = localStorage.getItem('authToken') || \"\";\n//     operation.setContext({\n//       headers: {\n//         Authorization: `JWT ${token}`\n//       }\n//     })\n//   },\n//   clientState: {\n//     defaults: {\n//       // !The double bangs converts any value to a boolean\n//       isLoggedIn: !!localStorage.getItem(\"authToken\")\n//     }\n//   }\n// });\n\n// Does a query on the client (not the server) and the returned value (boolean) determines what the user sees, in this case home page or authorization page\n// const IS_LOGGED_IN_QUERY = gql`\n//   query {\n//     isLoggedIn @client\n//   }\n// `;\n"]},"metadata":{},"sourceType":"module"}