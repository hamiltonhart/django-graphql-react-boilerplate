{"ast":null,"code":"import _taggedTemplateLiteral from \"/Volumes/Ravenclaw/_d_Development/Work/django-react-graphql-boilerplate/django-react-boilerplate/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Volumes/Ravenclaw/_d_Development/Work/django-react-graphql-boilerplate/django-react-boilerplate/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Volumes/Ravenclaw/_d_Development/Work/django-react-graphql-boilerplate/django-react-boilerplate/src/components/Auth/Login.js\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  {\\n    users{\\n      id\\n      username\\n    }\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  mutation($username: String!, $password: String!) {\\n    tokenAuth(username: $username, password: $password) {\\n      token\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from \"react\";\nimport { useApolloClient } from \"@apollo/react-hooks\";\nimport { Mutation } from \"react-apollo\";\nimport { gql } from \"apollo-boost\";\n\nconst Login = () => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        username = _useState2[0],\n        setUsername = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        password = _useState4[0],\n        setPassword = _useState4[1];\n\n  const client = useApolloClient();\n\n  const handleSubmit = async (e, tokenAuth, client) => {\n    e.preventDefault();\n    const res = await tokenAuth({\n      variables: {\n        username,\n        password\n      }\n    }); // localStorage.setItem(\"authToken\", res.data.tokenAuth.token);\n    // client.cache.writeData({ data: { isLoggedIn: true } });\n\n    console.log(client);\n  };\n\n  return React.createElement(Mutation, {\n    mutation: TOKEN_AUTH_MUTATION,\n    variables: {\n      username,\n      password\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, (tokenAuth, {\n    loading,\n    error\n  }) => React.createElement(\"form\", {\n    onSubmit: e => handleSubmit(e, tokenAuth, client),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, console.log(client), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"username\",\n    onChange: e => setUsername(e.target.value),\n    value: username,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"password\",\n    placeholder: \"password\",\n    onChange: e => setPassword(e.target.value),\n    value: password,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Submit\")));\n};\n\nconst TOKEN_AUTH_MUTATION = gql(_templateObject());\nconst USERS_QUERY = gql(_templateObject2());\nexport default Login;","map":{"version":3,"sources":["/Volumes/Ravenclaw/_d_Development/Work/django-react-graphql-boilerplate/django-react-boilerplate/src/components/Auth/Login.js"],"names":["React","useState","useApolloClient","Mutation","gql","Login","username","setUsername","password","setPassword","client","handleSubmit","e","tokenAuth","preventDefault","res","variables","console","log","TOKEN_AUTH_MUTATION","loading","error","target","value","USERS_QUERY"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,GAAT,QAAoB,cAApB;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA,oBACcJ,QAAQ,CAAC,EAAD,CADtB;AAAA;AAAA,QACXK,QADW;AAAA,QACDC,WADC;;AAAA,qBAEcN,QAAQ,CAAC,EAAD,CAFtB;AAAA;AAAA,QAEXO,QAFW;AAAA,QAEDC,WAFC;;AAGlB,QAAMC,MAAM,GAAGR,eAAe,EAA9B;;AAEA,QAAMS,YAAY,GAAG,OAAOC,CAAP,EAAUC,SAAV,EAAqBH,MAArB,KAAgC;AACnDE,IAAAA,CAAC,CAACE,cAAF;AACA,UAAMC,GAAG,GAAG,MAAMF,SAAS,CAAC;AAAEG,MAAAA,SAAS,EAAE;AAAEV,QAAAA,QAAF;AAAYE,QAAAA;AAAZ;AAAb,KAAD,CAA3B,CAFmD,CAGnD;AACA;;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AACD,GAND;;AAQA,SACE,oBAAC,QAAD;AAAU,IAAA,QAAQ,EAAES,mBAApB;AAAyC,IAAA,SAAS,EAAE;AAAEb,MAAAA,QAAF;AAAYE,MAAAA;AAAZ,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACK,SAAD,EAAY;AAAEO,IAAAA,OAAF;AAAWC,IAAAA;AAAX,GAAZ,KACC;AAAM,IAAA,QAAQ,EAAET,CAAC,IAAID,YAAY,CAACC,CAAD,EAAIC,SAAJ,EAAeH,MAAf,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGO,OAAO,CAACC,GAAR,CAAYR,MAAZ,CADH,EAEE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,WAAW,EAAC,UAFd;AAGE,IAAA,QAAQ,EAAEE,CAAC,IAAIL,WAAW,CAACK,CAAC,CAACU,MAAF,CAASC,KAAV,CAH5B;AAIE,IAAA,KAAK,EAAEjB,QAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAQE;AACE,IAAA,IAAI,EAAC,UADP;AAEE,IAAA,WAAW,EAAC,UAFd;AAGE,IAAA,QAAQ,EAAEM,CAAC,IAAIH,WAAW,CAACG,CAAC,CAACU,MAAF,CAASC,KAAV,CAH5B;AAIE,IAAA,KAAK,EAAEf,QAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EAcE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdF,CAFJ,CADF;AAsBD,CAnCD;;AAqCA,MAAMW,mBAAmB,GAAGf,GAAH,mBAAzB;AAQA,MAAMoB,WAAW,GAAGpB,GAAH,oBAAjB;AASA,eAAeC,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { useApolloClient } from \"@apollo/react-hooks\";\nimport { Mutation } from \"react-apollo\";\nimport { gql } from \"apollo-boost\";\n\nconst Login = () => {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const client = useApolloClient();\n\n  const handleSubmit = async (e, tokenAuth, client) => {\n    e.preventDefault();\n    const res = await tokenAuth({ variables: { username, password } });\n    // localStorage.setItem(\"authToken\", res.data.tokenAuth.token);\n    // client.cache.writeData({ data: { isLoggedIn: true } });\n    console.log(client);\n  };\n\n  return (\n    <Mutation mutation={TOKEN_AUTH_MUTATION} variables={{ username, password }}>\n      {(tokenAuth, { loading, error}) => (\n        <form onSubmit={e => handleSubmit(e, tokenAuth, client)}>\n          {console.log(client)}\n          <input\n            type=\"text\"\n            placeholder=\"username\"\n            onChange={e => setUsername(e.target.value)}\n            value={username}\n          />\n          <input\n            type=\"password\"\n            placeholder=\"password\"\n            onChange={e => setPassword(e.target.value)}\n            value={password}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    </Mutation>\n  );\n};\n\nconst TOKEN_AUTH_MUTATION = gql`\n  mutation($username: String!, $password: String!) {\n    tokenAuth(username: $username, password: $password) {\n      token\n    }\n  }\n`;\n\nconst USERS_QUERY = gql`\n  {\n    users{\n      id\n      username\n    }\n  }\n`;\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}