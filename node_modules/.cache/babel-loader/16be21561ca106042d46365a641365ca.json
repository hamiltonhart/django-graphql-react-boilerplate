{"ast":null,"code":"import _taggedTemplateLiteral from \"/Volumes/Ravenclaw/_d_Development/Work/django-react-graphql-boilerplate/django-react-boilerplate/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Volumes/Ravenclaw/_d_Development/Work/django-react-graphql-boilerplate/django-react-boilerplate/src/index.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  {\\n    users {\\n      id\\n      username\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Auth from \"./components/Auth\";\nimport { ApolloProvider, useQuery } from \"@apollo/react-hooks\";\nimport ApolloClient, { gql } from \"apollo-boost\";\nimport * as serviceWorker from \"./serviceWorker\"; // uri: \"http://example.herokuapp.com/graphql/\"\n// !Apollo Client is available to the entire app\n// ! fetchOptions: {credentials: 'include' - means to include operation.headers (just below in the request)}\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:8000/graphql/\"\n});\nconst USERS_QUERY = gql(_templateObject());\n\nconst ApolloApp = () => {\n  const _useQuery = useQuery(USERS_QUERY),\n        data = _useQuery.data,\n        loading = _useQuery.loading,\n        error = _useQuery.error;\n\n  if (loading) return React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Loading\");\n  if (error) return React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Error: \", error);\n  return React.createElement(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, console.log(data), React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"Done\")));\n};\n\nReactDOM.render(React.createElement(ApolloApp, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 43\n  },\n  __self: this\n}), document.getElementById(\"root\")); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister(); // const cache = new InMemoryCache();\n// const client = new ApolloClient({\n//   uri: \"http://localhost:8000/graphql/\",\n//   cache,\n//   fetchOptions: {\n//     credentials: \"include\"\n//   },\n//   request: operation => {\n//     const token = localStorage.getItem(\"authToken\") || \"\";\n//     operation.setContext({\n//       headers: {\n//         Authorization: `JWT ${token}`\n//       }\n//     });\n//   }\n// });\n// cache.writeData({\n//   data: {\n//     isLoggedIn: !!localStorage.getItem(\"authToken\")\n//   }\n// });\n// const IS_LOGGED_IN_QUERY = gql`\n//   {\n//     isLoggedIn @client\n//   }\n// `;\n// // ! Change the turnary below to include an authorization page, or whatever the user should see if they are not logged in.\n// ReactDOM.render(\n//   <ApolloProvider client={client}>\n//     <Query query={IS_LOGGED_IN_QUERY}>\n//       {({ data }) => (data.isLoggedIn ? <App /> : <Auth />)}\n//     </Query>\n//   </ApolloProvider>,\n//   document.getElementById(\"root\")\n// );","map":{"version":3,"sources":["/Volumes/Ravenclaw/_d_Development/Work/django-react-graphql-boilerplate/django-react-boilerplate/src/index.js"],"names":["React","ReactDOM","App","Auth","ApolloProvider","useQuery","ApolloClient","gql","serviceWorker","client","uri","USERS_QUERY","ApolloApp","data","loading","error","console","log","render","document","getElementById","unregister"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AAEA,SAASC,cAAT,EAAyBC,QAAzB,QAAyC,qBAAzC;AACA,OAAOC,YAAP,IAAuBC,GAAvB,QAAkC,cAAlC;AAEA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B,C,CACA;AAEA;AACA;;AACA,MAAMC,MAAM,GAAG,IAAIH,YAAJ,CAAiB;AAC9BI,EAAAA,GAAG,EAAE;AADyB,CAAjB,CAAf;AAIA,MAAMC,WAAW,GAAGJ,GAAH,mBAAjB;;AASA,MAAMK,SAAS,GAAG,MAAM;AAAA,oBACSP,QAAQ,CAACM,WAAD,CADjB;AAAA,QACfE,IADe,aACfA,IADe;AAAA,QACTC,OADS,aACTA,OADS;AAAA,QACAC,KADA,aACAA,KADA;;AAGtB,MAAID,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAYA,KAAZ,CAAP;AACX,SACE,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEN,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGO,OAAO,CAACC,GAAR,CAAYJ,IAAZ,CADH,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,CADF,CADF;AAQD,CAbD;;AAeAZ,QAAQ,CAACiB,MAAT,CAAgB,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA+BC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA/B,E,CAEA;AACA;AACA;;AACAZ,aAAa,CAACa,UAAd,G,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Auth from \"./components/Auth\";\n\nimport { ApolloProvider, useQuery } from \"@apollo/react-hooks\";\nimport ApolloClient, { gql } from \"apollo-boost\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n// uri: \"http://example.herokuapp.com/graphql/\"\n\n// !Apollo Client is available to the entire app\n// ! fetchOptions: {credentials: 'include' - means to include operation.headers (just below in the request)}\nconst client = new ApolloClient({\n  uri: \"http://localhost:8000/graphql/\"\n});\n\nconst USERS_QUERY = gql`\n  {\n    users {\n      id\n      username\n    }\n  }\n`;\n\nconst ApolloApp = () => {\n  const {data, loading, error} = useQuery(USERS_QUERY);\n  \n  if (loading) return <h1>Loading</h1>;\n  if (error) return <h1>Error: {error}</h1>\n  return (\n    <ApolloProvider client={client}>\n      <div>\n        {console.log(data)}\n        <h1>Done</h1>\n      </div>\n    </ApolloProvider>\n  );\n};\n\nReactDOM.render(<ApolloApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// const cache = new InMemoryCache();\n// const client = new ApolloClient({\n//   uri: \"http://localhost:8000/graphql/\",\n//   cache,\n//   fetchOptions: {\n//     credentials: \"include\"\n//   },\n//   request: operation => {\n//     const token = localStorage.getItem(\"authToken\") || \"\";\n//     operation.setContext({\n//       headers: {\n//         Authorization: `JWT ${token}`\n//       }\n//     });\n//   }\n// });\n\n// cache.writeData({\n//   data: {\n//     isLoggedIn: !!localStorage.getItem(\"authToken\")\n//   }\n// });\n\n// const IS_LOGGED_IN_QUERY = gql`\n//   {\n//     isLoggedIn @client\n//   }\n// `;\n\n// // ! Change the turnary below to include an authorization page, or whatever the user should see if they are not logged in.\n\n// ReactDOM.render(\n//   <ApolloProvider client={client}>\n//     <Query query={IS_LOGGED_IN_QUERY}>\n//       {({ data }) => (data.isLoggedIn ? <App /> : <Auth />)}\n//     </Query>\n//   </ApolloProvider>,\n//   document.getElementById(\"root\")\n// );\n"]},"metadata":{},"sourceType":"module"}